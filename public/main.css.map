{"version":3,"sources":["webpack:///webpack:///client/client/stylesheets/components/_user.scss","webpack:///webpack:///client/client/stylesheets/abstracts/_variables.scss"],"names":[],"mappings":"AAAA;EACE,aAAa,EACd;;AAED;EACE,iBAAiB;EACjB,aAAa;EACb,qBAAqB;EACrB,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,cAAc;EACd,uBAAuB,EAiBxB;ECfG;IDVJ;MAWI,oBAAoB,EAcvB;ECfG;IDVJ;MAeI,oBAAoB,EAUvB;ECfG;IDVJ;MAmBI,oBAAoB,EAMvB;ECfG;IDVJ;MAuBI,oBAAoB,EAEvB;;AAED;EACE,YAAY;EACZ,cAAc;EACd,QAAQ;EACR,mBAAmB,EAiBpB;ECtCG;IDiBJ;MAOI,QAAQ,EAcX;ECtCG;IDiBJ;MAWI,QAAQ,EAUX;ECtCG;IDiBJ;MAeI,QAAQ,EAMX;ECtCG;IDiBJ;MAmBI,QAAQ,EAEX;;AAED;EACE,cAAc;EACd,YAAY;EACZ,QAAQ,EAiBT;EC5DG;IDwCJ;MAMI,QAAQ,EAcX;EC5DG;IDwCJ;MAUI,QAAQ,EAUX;EC5DG;IDwCJ;MAcI,QAAQ,EAMX;EC5DG;IDwCJ;MAkBI,QAAQ,EAEX;;AAED;EACE,mBAAmB;EACnB,oBAAoB,EACrB;;AAED;EACE,qBAAqB;EACrB,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,cAAc;EACd,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB,EACrB;;AAED;EACE,qBAAqB;EACrB,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,cAAc;EACd,oBAAoB;EACpB,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB,EACrB;;AACD;EACE,mBAAmB;EACnB,QAAQ,EACT;;AAED;EACE,mBAAmB;EACnB,QAAQ,EACT","file":"main.css","sourcesContent":["#user-component {\n  width: 100vw;\n}\n\n.user-columns-container {\n  margin-top: 65px;\n  width: 100vw;\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: column;\n\n  @include respond-to('xsmall') {\n    flex-direction: row;\n  };\n\n  @include respond-to('small') {\n    flex-direction: row;\n  };\n\n  @include respond-to('medium') {\n    flex-direction: row;\n  };\n\n  @include respond-to('large') {\n    flex-direction: row;\n  };\n}\n\n.user-left {\n  float: left;\n  padding: 15px; \n  flex: 1;\n  text-align: center;\n\n  @include respond-to('xsmall') {\n    flex: 1;\n  };\n\n  @include respond-to('small') {\n    flex: 1;\n  };\n\n  @include respond-to('medium') {\n    flex: 1;\n  };\n\n  @include respond-to('large') {\n    flex: 1;\n  };\n}\n\n.user-right {\n  padding: 15px; \n  float: left;\n  flex: 1;\n\n  @include respond-to('xsmall') {\n    flex: 1;\n  };\n\n  @include respond-to('small') {\n    flex: 2;\n  };\n\n  @include respond-to('medium') {\n    flex: 2;\n  };\n\n  @include respond-to('large') {\n    flex: 3;\n  };\n}\n\n.user-avatar {\n  text-align: center;\n  margin-bottom: 15px;\n}\n\n.user-details {\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  flex-wrap: nowrap;\n  align-items: center;\n}\n\n.user-row {\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: row;\n  text-align: left;\n  flex-wrap: nowrap;\n  align-items: center;\n}\n.user-icon {\n  margin-right: 15px;\n  flex: 1;\n}\n\n.user-field {\n  margin-right: 15px;\n  flex: 6;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** webpack:///client/client/stylesheets/components/_user.scss\n **/","$breakpoints: (\n  'xsmall' : 450px,\n  'small'  : 767px,\n  'medium' : 992px,\n  'large'  : 1200px\n);\n\n@mixin respond-to($breakpoint) {\n  // Retrieves the value from the key\n  $value: map-get($breakpoints, $breakpoint);\n\n  // If the key exists in the map\n  @if $value != null {\n    // Prints a media query based on the value\n    @media (min-width: $value) {\n      @content;\n    }\n  }\n\n  // If the key doesn't exist in the map\n  @else {\n    @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n        + \"Please make sure it is defined in `$breakpoints` map.\";\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** webpack:///client/client/stylesheets/abstracts/_variables.scss\n **/"],"sourceRoot":""}